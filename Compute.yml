---
Description: >
       Deploys the necessary compute infrastructure and dependencies to host a Log-Analytics solution on AWS.
       The template creates an IAM role for the EC2 instances, a security group, 
       and three EC2 instances provisioned across two subnets and two availability zones for fault tolerance. 
       The security group allows incoming traffic on ports 22 (SSH), 80 (HTTP), and 443 (HTTPS) 

Parameters:
  EnvironmentName:
    Description: A name that will be prefixed to resource names for easy identification
    Type: String

Resources:
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action: 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
      Policies:
      - PolicyName: kinesis
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: 'kinesis:*'
            Effect: Allow
            Resource: '*'

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, HTTP, and HTTPS access
      VpcId: !ImportValue "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      ImageId: ami-0aa7d40eeae50c9a9
      KeyName: ~/Desktop/Container.pem
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 30
          VolumeType: gp2
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet: [!Ref SecurityGroup] 
        SubnetId: !ImportValue "${EnvironmentName}-PUB1-SN"

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      ImageId: ami-0aa7d40eeae50c9a9
      KeyName: ~/Desktop/Container.pem
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 30
          VolumeType: gp2
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet: [!Ref SecurityGroup]
        SubnetId: !ImportValue "${EnvironmentName}-PUB2-SN"

  EC2Instance3:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      ImageId: ami-0aa7d40eeae50c9a9
      KeyName: ~/Desktop/Container.pem
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize: 30
          VolumeType: gp2
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeviceIndex: 0
        GroupSet: [!Ref SecurityGroup]
        SubnetId: 
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
