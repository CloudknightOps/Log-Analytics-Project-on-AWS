Description: >
       Deploys the necessary compute infrastructure and dependencies to host a Log-Analytics solution on AWS.
       The template creates an IAM role for the EC2 Instance, a security group, 
       and an autoscaling group with a launch template provisioned across two subnets and two availability zones for fault tolerance. 
       The security group allows incoming traffic on ports 22 (SSH), 80 (HTTP), and 443 (HTTPS) 

Parameters:
  EnvironmentName:
    Description: A name that will be prefixed to resource names for easy identification
    Type: String

 
Resources:
  
  WebProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: WebRole
  WebRole:
    Type: AWS::IAM::Role
    Properties:
      Name: web-log-ec2-role
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess"
        - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
  
  LogAnalyticsSeCGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH, HTTP, and HTTPS access
      VpcId: 
       !ImportValue "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0


  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "web-log-launch-template"
      LaunchTemplateData:
        InstanceType: t2.micro
        ImageId: ami-005f9685cb30f234b
        SecurityGroupIds:
          - !Ref LogAnalyticsSeCGroup
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
              sudo apt-get update -y
              sudo apt-get install apache2 -y
              sudo systemctl start apache2.service
              cd /var/www/html
              echo "It Works! Our Servers are UP " >index.html   
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: "Name"
                Value: "LogAnalyticsInstance"
              - Key: "Environment"
                Value: !Ref EnvironmentName
  AutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      AutoScalingGroupName: "LogAnalyticsASG"
      LaunchTemplate:
        LaunchTemplateName: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      MaxSize: "7"
      MinSize: "3"
      DesiredCapacity: "3"
      TargetGroupARNs:
        - Ref: TargetGroup
      HealthCheckGracePeriod: 300
      Tags:
        - Key: "Name"
          Value: "LogAnalyticsASG"
          PropagateAtLaunch: true 
      
  MyScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: MyAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 90.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
      Notifications:
        - TopicARN: arn:aws:sns:us-east-1:0123456789:my-topic
          NotificationTypes:
            - "autoscaling:EC2_INSTANCE_LAUNCH"


  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "LogAnalyticsTargetGroup"
      Port: 80
      Protocol: HTTP
      VpcId: 
       Fn::ImportValue:
         !Sub "${EnvironmentName}-VPCID"
      TargetType: instance
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: "/"
      HealthCheckPort: "80"
      HealthCheckProtocol: "HTTP"
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "LogAnalyticsLoadBalancer"
      Scheme: internet-facing
      Subnets: 
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - !Ref LogAnalyticsSeCGroup
      Type: application
      IpAddressType: ipv4

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroup
      LoadBalancerArn:
        Ref: LoadBalancer
      Port: '80'
      Protocol: HTTP
      
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

